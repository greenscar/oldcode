import java.io.*;
import java.awt.*;
import java.applet.*;
import java.util.*;
import java.io.*;
import java.net.*;
public class screenMgr extends java.awt.Frame {
    
	String home = "127.0.0.1";
	int port = 6669;
	Socket s = null;
	String serverResponse = null;

    /** Creates new form screenMgr */
    public screenMgr() {
        initComponents ();
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        listTenentsButton = new java.awt.Button();
		button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        button4 = new java.awt.Button();
        button5 = new java.awt.Button();
        setLayout(new java.awt.GridLayout(5, 1));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        }
        );
        
        button3.setFont(new java.awt.Font ("Dialog", 0, 11));
        button3.setLabel("Create a new Apartment");
        button3.setName("button7");
        button3.setBackground(java.awt.Color.lightGray);
        button3.setForeground(java.awt.Color.black);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        }
        );
        
        add(button3);
        
        
        button4.setFont(new java.awt.Font ("Dialog", 0, 11));
        button4.setLabel("Create a new Tenent");
        button4.setName("button8");
        button4.setBackground(java.awt.Color.lightGray);
        button4.setForeground(java.awt.Color.black);
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        }
        );
        
        add(button4);
        
        listTenentsButton.setFont(new java.awt.Font ("Dialog", 0, 11));
        listTenentsButton.setLabel("List Tenents");
        listTenentsButton.setName("button24");
        listTenentsButton.setBackground(java.awt.Color.lightGray);
        listTenentsButton.setForeground(java.awt.Color.black);
        listTenentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listTenentsButtonActionPerformed(evt);
            }
        }
        );

        
        button2.setFont(new java.awt.Font ("Dialog", 0, 11));
        button2.setLabel("Set Apartment Available");
        button2.setName("button6");
        button2.setBackground(java.awt.Color.lightGray);
        button2.setForeground(java.awt.Color.black);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        }
        );
        
        add(button2);
        
        
        
        add(listTenentsButton);
        button5.setFont(new java.awt.Font ("Dialog", 0, 11));
        button5.setLabel("Log out");
        button5.setName("button24");
        button5.setBackground(java.awt.Color.lightGray);
        button5.setForeground(java.awt.Color.black);
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        }
        );
        
        add(button5);
        
        //pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setSize(new java.awt.Dimension(300, 200));
        setLocation((screenSize.width-300)/2,(screenSize.height-200)/2);
    }//GEN-END:initComponents

  private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
      new screenCreateNewTenent(this, true).show();
  }//GEN-LAST:event_button4ActionPerformed

  private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        new screenAddApt(this, true).show();
  }//GEN-LAST:event_button3ActionPerformed

  private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
         new screenSetAptAvail(this, true).show();
  }//GEN-LAST:event_button2ActionPerformed

  private void listTenentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        //get Vector of tenents from server
		getAllTenents();
  }//GEN-LAST:event_button1ActionPerformed

  private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        setVisible(false);
        dispose();

  }//GEN-LAST:event_button5ActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible (false);
        dispose ();
    }//GEN-LAST:event_closeDialog
	
	/**********************************************************************/
    protected void createNewApt(Vector v)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
  		os.print("NEWAPT\n");
	   System.out.println("Sending New Apartment to Server");
		for(int i = 0; i < v.size(); i ++)
		{
			os.print((String)v.elementAt(i)+"\n");
		    System.out.println((String)v.elementAt(i)+"\n");
		}
		System.out.println("Done sending new Apartment");
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }
	/**********************************************************************/
	protected void getAllTenents()
	{
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
  		os.print("REQALLTENENTS\n");
		System.out.println("Sending request all availible to server");
		String line = null;
		try{
			while (!(line = is.readLine()).equals("***")){
				System.out.println("reading a line");
				reportVector.add("Tenent: "+line);
				System.out.println("Tenent: "+line);
			}
		}
		catch(Exception e){
        	    System.out.println("Exception after readline()");
  		    is.close();
  		}
  		if(s != null) s.close();
  	}
  	catch(Exception e)
  	{
  		System.out.println("Error" + e);
  	}
	new screenDisplayAll(this, true, reportVector).show();
  }
	/**********************************************************************/
    protected void createNewTenent(Vector v)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
  		os.print("NEWTENENT\n");
			System.out.println("Sending New Tenant Information to server");
		for(int i = 0; i < v.size(); i ++)
		{
			os.print((String)v.elementAt(i)+"\n");
			System.out.println((String)v.elementAt(i)+"\n");
		}
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }
	
	/**********************************************************************/
    protected void chargeAccount(int custNum, float amount)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
		String cust = String.valueOf(custNum);
		String amt = String.valueOf(amount);
  		os.print("CHARGEFEES\n");
  		os.print(cust + "\n");
		os.print(amt + "\n");
		System.out.println("Sending Charge Fees to server");
		System.out.println("Sending Customer Number "+custNum);
		System.out.println("Sending amount "+amount);
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }
    protected void setAptAvailable(int aptNum)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
		String apt = String.valueOf(aptNum);
  		os.print("SETAPTAVAIL\n");
  		os.print(apt + "\n");
		System.out.println("Sending Set Apartment Availability to server");
		System.out.println("Sending apartment number "+aptNum+ " to server");
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }
    protected void rentAptOut(int aptNum, int custNum)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
		String apt = String.valueOf(aptNum);
		String cust = String.valueOf(custNum);
  		os.print("RENTAPTOUT\n");
  		os.print(apt + "\n");
  		os.print(cust + "\n");
		System.out.println("Sending Rent Apartment Out to Server");
		System.out.println("Sending Apartment Num "+aptNum+" to server");
     	System.out.println("Sending Customer Num "+custNum+" to server");
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }

  protected void creditAccount(int custNum, float amount)
  {
        Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
		String cust = String.valueOf(custNum);
		String amt = String.valueOf(amount);
  		os.print("CREDITACCT\n");
  		os.print(cust + "\n");
		os.print(amt + "\n");
		System.out.println("Sending Credit Account to server");
		System.out.println("Sending Customer Number "+custNum+" to server");
		System.out.println("Sending Amount $"+amount+" to server");
		if(s != null) s.close();
	}
	catch(Exception e){System.out.println("Error" + e);}
    }
	
   /**
    * @param args the command line arguments
    */
    public static void main (String args[]) {
        new screenMgr().show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button listTenentsButton;
	private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private java.awt.Button button5;
    // End of variables declaration//GEN-END:variables

}
