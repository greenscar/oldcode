import java.io.*;
import java.awt.*;
import java.applet.*;
import java.util.*;
import java.io.*;
import java.net.*;
public class screenVisitor extends  java.awt.Frame {

	String home = "127.0.0.1";
	int port = 6669;
	Socket s = null;
	String serverResponse = null;

    /** Creates new form screenVisitor */
    public screenVisitor() {
        initComponents ();
        pack ();
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        setLayout(new java.awt.GridLayout(3, 1));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        }
        );
        
        button1.setFont(new java.awt.Font ("Dialog", 0, 11));
        button1.setLabel("View All Available Apartments");
        button1.setBackground(java.awt.Color.lightGray);
        button1.setForeground(java.awt.Color.black);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        }
        );
        
        add(button1);
        
        
        button2.setFont(new java.awt.Font ("Dialog", 0, 11));
        button2.setLabel("Search Available Apartments");
        button2.setBackground(java.awt.Color.lightGray);
        button2.setForeground(java.awt.Color.black);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        }
        );
        
        add(button2);
        
        
        button3.setFont(new java.awt.Font ("Dialog", 0, 11));
        button3.setLabel("Back");
        button3.setName("button11");
        button3.setBackground(java.awt.Color.lightGray);
        button3.setForeground(java.awt.Color.black);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        }
        );
        
        add(button3);
         java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setSize(new java.awt.Dimension(300, 200));
        setLocation((screenSize.width-300)/2,(screenSize.height-200)/2);
    }//GEN-END:initComponents

  private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        setVisible(false);
        dispose();
  }//GEN-LAST:event_button3ActionPerformed

  private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        new screenSearchAvail(this, true).show();
  }//GEN-LAST:event_button2ActionPerformed

  private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        requestAllAvailableApts();
  }//GEN-LAST:event_button1ActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible (false);
        dispose ();
    }//GEN-LAST:event_closeDialog
  
    protected void aptSearch(Vector v)
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
        String line = null;
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
  		System.out.println("Sending apartment search to server");
		os.print("APTSEARCH\n");
		for(int i = 0; i < v.size(); i ++)
		{
			os.print((String)v.elementAt(i)+"\n");
		}
            try{
                while(!(line = is.readLine()).equals("***")){
                    System.out.println("Reading a line");
                    reportVector.add(line);
                    System.out.println("APT: "+line);
                }
            }
            catch(Exception e){s.close();}
            if(s != null) s.close();
        }
        catch(Exception e){}
        new screenDisplayAll(this, true, reportVector).show();
    }
    protected void requestAllAvailableApts()
    {
  	Socket s = null;
  	String serverResponse = null;
  	Vector reportVector = new Vector();
  	try{
  		System.out.println("Opening socket connection");
  		s = new Socket(home, port);
  		System.out.println("Socket connection established.");
  		PrintStream os = new PrintStream(s.getOutputStream());
  		DataInputStream is = new DataInputStream(s.getInputStream());
  		os.print("REQALLAVAIL\n");
		System.out.println("Sending request all availible to server");
		String line = null;
		try{
			while (!(line = is.readLine()).equals("***")){
				System.out.println("reading a line");
				reportVector.add(line);
				System.out.println("Customer: "+line);
			}
		}
		catch(Exception e){
        	    System.out.println("Exception after readline()");
  		    is.close();
  		}
  		if(s != null) s.close();
  	}
  	catch(Exception e)
  	{
  		System.out.println("Error" + e);
  	}
	new screenDisplayAll(this, true, reportVector).show();
  }
    public static void main (String args[]) {
        new screenVisitor ().show ();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    // End of variables declaration//GEN-END:variables

}
